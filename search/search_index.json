{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Why PH7? Native to python More code modularity Easy to write reusable components Out of the box editor support Syntax highlighting Code navvigation tools Auto-completion Type safety using MyPy Install pip3 install ph7 Quickstart Write your first block of markup from ph7.html import body, div, html template = html( body( div( \"Hello, World!\", ) ) ) print(template) <html> <body> <div>Hello, World!</div> </body> </html> Or write a CSS class from ph7.css import CSSObject class flex_center(CSSObject): display = \"flex\" align_items = \"center\" justify_content = \"center\" print(flex_center()) .flex-center { display: flex; align-items: center; justify-content: center; } Or use python function as JavaScript function from ph7.js import as_js, console, document, fetch async def fetchDog(): response = await fetch( \"https://dog.ceo/api/breeds/image/random\", {\"method\": \"GET\"}, ) if response.status != 200: response_body = await response.text() console.log(f\"Error fetching dog; {response_body}\") return data = await response.json() document.getElementById(\"image\").src = data.message print(as_js(fetchDog)) async function fetchDog() { let response = await fetch('https://dog.ceo/api/breeds/image/random', { 'method': 'GET' }); if (response.status != 200) { let response_body = await response.text(); console.log('Error fetching dog; ' + response_body); return; }; let data = await response.json(); document.getElementById('image').src = data.message; }; Next Steps Writing HTML Writing CSS Writing JS Django Integration","title":"Home"},{"location":"#why-ph7","text":"Native to python More code modularity Easy to write reusable components Out of the box editor support Syntax highlighting Code navvigation tools Auto-completion Type safety using MyPy","title":"Why PH7?"},{"location":"#install","text":"pip3 install ph7","title":"Install"},{"location":"#quickstart","text":"Write your first block of markup from ph7.html import body, div, html template = html( body( div( \"Hello, World!\", ) ) ) print(template) <html> <body> <div>Hello, World!</div> </body> </html> Or write a CSS class from ph7.css import CSSObject class flex_center(CSSObject): display = \"flex\" align_items = \"center\" justify_content = \"center\" print(flex_center()) .flex-center { display: flex; align-items: center; justify-content: center; } Or use python function as JavaScript function from ph7.js import as_js, console, document, fetch async def fetchDog(): response = await fetch( \"https://dog.ceo/api/breeds/image/random\", {\"method\": \"GET\"}, ) if response.status != 200: response_body = await response.text() console.log(f\"Error fetching dog; {response_body}\") return data = await response.json() document.getElementById(\"image\").src = data.message print(as_js(fetchDog)) async function fetchDog() { let response = await fetch('https://dog.ceo/api/breeds/image/random', { 'method': 'GET' }); if (response.status != 200) { let response_body = await response.text(); console.log('Error fetching dog; ' + response_body); return; }; let data = await response.json(); document.getElementById('image').src = data.message; };","title":"Quickstart"},{"location":"#next-steps","text":"Writing HTML Writing CSS Writing JS Django Integration","title":"Next Steps"},{"location":"CHANGELOG/","text":"v0.1.0-rc5 (16-03-2024) Adds support for including CSS and JS files in separate blocks v0.1.0-rc4 (15-03-2024) Adds template engine for Flask Adds support for pseudo selector arguments via __init_subclass__ method Adds support for returning iterables on the functional views v0.1.0-rc3 (12-03-2024) Adds support for named arguments on view based function Adds support for pseudo selectors Adds mock context and dry run support on the Django engine v0.1.0-rc2 (11-03-2024) Adds support for dry-runs on Django engine for functional resource collection Renames the handlers attribute to on-* Adds safe guard for missing Django installation v0.1.0-rc1 (09-03-2024) Extends support for document API Adds support for transpiling await expressions String interpolations Dictionary declarations try/except blocks raise statement Better documentation for Django integrations","title":"v0.1.0-rc5 (16-03-2024)"},{"location":"CHANGELOG/#v010-rc5-16-03-2024","text":"Adds support for including CSS and JS files in separate blocks","title":"v0.1.0-rc5 (16-03-2024)"},{"location":"CHANGELOG/#v010-rc4-15-03-2024","text":"Adds template engine for Flask Adds support for pseudo selector arguments via __init_subclass__ method Adds support for returning iterables on the functional views","title":"v0.1.0-rc4 (15-03-2024)"},{"location":"CHANGELOG/#v010-rc3-12-03-2024","text":"Adds support for named arguments on view based function Adds support for pseudo selectors Adds mock context and dry run support on the Django engine","title":"v0.1.0-rc3 (12-03-2024)"},{"location":"CHANGELOG/#v010-rc2-11-03-2024","text":"Adds support for dry-runs on Django engine for functional resource collection Renames the handlers attribute to on-* Adds safe guard for missing Django installation","title":"v0.1.0-rc2 (11-03-2024)"},{"location":"CHANGELOG/#v010-rc1-09-03-2024","text":"Extends support for document API Adds support for transpiling await expressions String interpolations Dictionary declarations try/except blocks raise statement Better documentation for Django integrations","title":"v0.1.0-rc1 (09-03-2024)"},{"location":"css/","text":"Adding Style Use style attribute to add style to a view. The style attribute is defined using a TypedDict object which means it's a type constrained dictionary. What this means is, you can utilise the autocomplete from your IDE for writing code faster. And since it's type constriained you can also utilise a tool like mypy to make sure you are not defining any wrong attributes. \"\"\"Simple hello example.\"\"\" from ph7.html import body, div, html template = html( body( div( \"Hello, World!\", style={ \"height\": \"100vh\", \"width\": \"100vw\", \"display\": \"flex\", \"align_items\": \"center\", \"justify_content\": \"center\", }, ) ) ) print(template) <html> <body> <div style=\"height:100vh;width:100vw;display:flex;align-items:center;justify-content:center\">Hello, World!</div> </body> </html> The style object get's rendered and cached at the object initialization for faster template rendering. CSSObject Using style object is not the only way to develop CSS with PH7, You can utilise a special class called CSSObject to define stylesheets. from ph7 import CSSObject, include from ph7.html import body, div, head, html class flex_center(CSSObject): display = \"flex\" align_items = \"center\" justify_content = \"center\" template = html( head( include(flex_center), ), body( div( div( \"Hello, World!\", ), class_name=[flex_center], ) ), ) print(template) <html> <head> <style> .flex-center { display: flex; align-items: center; justify-content: center; } </style> </head> <body> <div class=\"flex-center\"> <div>Hello, World!</div> </div> </body> </html> A CSSObject can also be reused via class inheritance. You can define a base CSS class and reuse it however many times you like. from ph7 import CSSObject class flex_center(CSSObject): display = \"flex\" align_items = \"center\" justify_content = \"center\" class textbox(flex_center): height = \"100vh\" width = \"100vw\" print(textbox()) .textbox { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; } Furthermore CSSObject also allows for nesting by sub classes. from ph7 import CSSObject class flex_center(CSSObject): display = \"flex\" align_items = \"center\" justify_content = \"center\" class textbox(flex_center): height = \"100vh\" width = \"100vw\" class text(CSSObject): font_size = \"12px\" font_weight = \"500\" font_family = \"Lucida Console, Monaco, monospace\" print(textbox()) .textbox { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; } .textbox .text { font-size: 12px; font-weight: 500; font-family: Lucida Console, Monaco, monospace; } To make your styles more manageable and reusable, you can define the styles in a separate module and import them throughout your codebase. Following section provides an example of a reusable stylesheet module. Pseudo Classes and Elements A pseudo class can be defined by adding _ at the beginning of class name, for selecting a child you can set child parameter. For pseudo, elements add __ at the beginning of the class name. from ph7 import CSSObject class item(CSSObject): height = \"30px\" width = \"100%\" margin_top = \"5px\" class _nth_child(CSSObject, n=1): margin_top = \"0px\" class __before(CSSObject): content = '\">\"' print(item()) .item { height: 30px; width: 100%; margin-top: 5px; } .item::before { content: \">\"; } .item:nth-child(1) { margin-top: 0px; } Static Context PH7 has a runtime context object which can be used for managing the static resource. To use a static context, import ph7.context.ctx , add ctx.static.view(__name__) at the top of your template and add ctx.static.include in your view. In the following example we'll use an external stylesheet for styling our view. from examples.script import alertHello from examples.style import textbox from ph7.context import ctx from ph7.html import body, div, head, html ctx.static.view(__name__) template = html( head( ctx.static.include, ), body( div( div( \"Click Here\", class_name=[textbox.text], on={ \"click\": alertHello(\"John Doe\"), }, ), class_name=[textbox], ) ), ) print(template.render(context={\"_view\": __name__})) <html> <head> <style id=\"css.examples.style\"> .textbox { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; } .textbox .text { font-size: 12px; font-weight: 500; font-family: Lucida Console, Monaco, monospace; } </style> <script type=\"text/javascript\" id=\"js.examples.script\"> function alertHello(user) { alert('Hello, ' + user); } </script> </head> <body> <div class=\"textbox\"> <div class=\"text\" onclick=\"alertHello('John Doe')\">Click Here</div> </div> </body> </html> As you can see, the static context collects the various static resources and includes them as part of the view. The output above is produced with the mode set to development by exporting DEVELOPMENT=\"1\" . When not in development mode, PH7 will compile static resources, write them as files and reference those files. Here's and example of production render of the same template <html> <head> <link href=\"/static/css/examples_style.css\" rel=\"stylesheet\" id=\"css.examples.style\" /> <script src=\"/static/js/examples_script.js\" type=\"text/javascript\" id=\"js.examples.script\"></script> </head> <body> <div class=\"textbox\"> <div class=\"text\" onclick=\"alertHello('John Doe')\">Click Here</div> </div> </body> </html> And here's what the CSS file looks like. $ cat static/css/examples_style.css .textbox { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; } .textbox .text { font-size: 12px; font-weight: 500; font-family: Lucida Console, Monaco, monospace; }","title":"CSS"},{"location":"css/#adding-style","text":"Use style attribute to add style to a view. The style attribute is defined using a TypedDict object which means it's a type constrained dictionary. What this means is, you can utilise the autocomplete from your IDE for writing code faster. And since it's type constriained you can also utilise a tool like mypy to make sure you are not defining any wrong attributes. \"\"\"Simple hello example.\"\"\" from ph7.html import body, div, html template = html( body( div( \"Hello, World!\", style={ \"height\": \"100vh\", \"width\": \"100vw\", \"display\": \"flex\", \"align_items\": \"center\", \"justify_content\": \"center\", }, ) ) ) print(template) <html> <body> <div style=\"height:100vh;width:100vw;display:flex;align-items:center;justify-content:center\">Hello, World!</div> </body> </html> The style object get's rendered and cached at the object initialization for faster template rendering.","title":"Adding Style"},{"location":"css/#cssobject","text":"Using style object is not the only way to develop CSS with PH7, You can utilise a special class called CSSObject to define stylesheets. from ph7 import CSSObject, include from ph7.html import body, div, head, html class flex_center(CSSObject): display = \"flex\" align_items = \"center\" justify_content = \"center\" template = html( head( include(flex_center), ), body( div( div( \"Hello, World!\", ), class_name=[flex_center], ) ), ) print(template) <html> <head> <style> .flex-center { display: flex; align-items: center; justify-content: center; } </style> </head> <body> <div class=\"flex-center\"> <div>Hello, World!</div> </div> </body> </html> A CSSObject can also be reused via class inheritance. You can define a base CSS class and reuse it however many times you like. from ph7 import CSSObject class flex_center(CSSObject): display = \"flex\" align_items = \"center\" justify_content = \"center\" class textbox(flex_center): height = \"100vh\" width = \"100vw\" print(textbox()) .textbox { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; } Furthermore CSSObject also allows for nesting by sub classes. from ph7 import CSSObject class flex_center(CSSObject): display = \"flex\" align_items = \"center\" justify_content = \"center\" class textbox(flex_center): height = \"100vh\" width = \"100vw\" class text(CSSObject): font_size = \"12px\" font_weight = \"500\" font_family = \"Lucida Console, Monaco, monospace\" print(textbox()) .textbox { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; } .textbox .text { font-size: 12px; font-weight: 500; font-family: Lucida Console, Monaco, monospace; } To make your styles more manageable and reusable, you can define the styles in a separate module and import them throughout your codebase. Following section provides an example of a reusable stylesheet module.","title":"CSSObject"},{"location":"css/#pseudo-classes-and-elements","text":"A pseudo class can be defined by adding _ at the beginning of class name, for selecting a child you can set child parameter. For pseudo, elements add __ at the beginning of the class name. from ph7 import CSSObject class item(CSSObject): height = \"30px\" width = \"100%\" margin_top = \"5px\" class _nth_child(CSSObject, n=1): margin_top = \"0px\" class __before(CSSObject): content = '\">\"' print(item()) .item { height: 30px; width: 100%; margin-top: 5px; } .item::before { content: \">\"; } .item:nth-child(1) { margin-top: 0px; }","title":"Pseudo Classes and Elements"},{"location":"css/#static-context","text":"PH7 has a runtime context object which can be used for managing the static resource. To use a static context, import ph7.context.ctx , add ctx.static.view(__name__) at the top of your template and add ctx.static.include in your view. In the following example we'll use an external stylesheet for styling our view. from examples.script import alertHello from examples.style import textbox from ph7.context import ctx from ph7.html import body, div, head, html ctx.static.view(__name__) template = html( head( ctx.static.include, ), body( div( div( \"Click Here\", class_name=[textbox.text], on={ \"click\": alertHello(\"John Doe\"), }, ), class_name=[textbox], ) ), ) print(template.render(context={\"_view\": __name__})) <html> <head> <style id=\"css.examples.style\"> .textbox { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; } .textbox .text { font-size: 12px; font-weight: 500; font-family: Lucida Console, Monaco, monospace; } </style> <script type=\"text/javascript\" id=\"js.examples.script\"> function alertHello(user) { alert('Hello, ' + user); } </script> </head> <body> <div class=\"textbox\"> <div class=\"text\" onclick=\"alertHello('John Doe')\">Click Here</div> </div> </body> </html> As you can see, the static context collects the various static resources and includes them as part of the view. The output above is produced with the mode set to development by exporting DEVELOPMENT=\"1\" . When not in development mode, PH7 will compile static resources, write them as files and reference those files. Here's and example of production render of the same template <html> <head> <link href=\"/static/css/examples_style.css\" rel=\"stylesheet\" id=\"css.examples.style\" /> <script src=\"/static/js/examples_script.js\" type=\"text/javascript\" id=\"js.examples.script\"></script> </head> <body> <div class=\"textbox\"> <div class=\"text\" onclick=\"alertHello('John Doe')\">Click Here</div> </div> </body> </html> And here's what the CSS file looks like. $ cat static/css/examples_style.css .textbox { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; } .textbox .text { font-size: 12px; font-weight: 500; font-family: Lucida Console, Monaco, monospace; }","title":"Static Context"},{"location":"django/","text":"Configure Template Engine To configure your Django application to use PH7 templates, update settings.py to use PH7's Django template engine. TEMPLATES = [ { \"NAME\": \"PH7\", \"BACKEND\": \"ph7.django.PH7Templates\", \"DIRS\": [], \"APP_DIRS\": True, \"OPTIONS\": {}, } ] Templates |_ home |_ templates |_ __init__.py # default view Define your view in __init__.py , when defining the view you need to name the default view template , for example from ph7.html import body, div, html, title template = html( title(\"Hello World\"), body( div( \"Hello, World!\", ) ), ) When rendering the view, refer to this template using relative path from django.shortcuts import render def home(request): return render( request=request, template_name=\"home\", # or \"home:template\" ) If you name your view anything other than template , you can specify the view name using module:view format. For example if you name your view home , you can specify the template as app:home . Forms Forms can be included directly using form tag. from django import forms from ph7.django import csrf_token from ph7.html import body, button, div, form, html, title class UserForm(forms.Form): \"\"\"User form class.\"\"\" name = forms.CharField(label=\"username\") email = forms.EmailField(label=\"email\") password = forms.CharField(label=\"password\", widget=forms.PasswordInput()) template = html( title(\"Forms Example\"), body( div( form( UserForm(), csrf_token, button(\"submit\", type=\"submit\"), ), ) ), ) <html> <head> <title>Forms Example</title> </head> <body> <div> <form> <label for=\"id_name\">username:</label> <input type=\"text\" name=\"name\" required=\"\" id=\"id_name\" /> <label for=\"id_email\">email:</label> <input type=\"email\" name=\"email\" maxlength=\"320\" required=\"\" id=\"id_email\"/> <label for=\"id_password\">password:</label> <input type=\"password\" name=\"password\" required=\"\" id=\"id_password\" /> <input name=\"csrfmiddlewaretoken\" value=\"aaAAAaAAaAAAaaAAAAAAAaAaaAaAAAaaAAAaaaaaaAAaAAaaAAaaaAAaAAAAaaaa\" id=\"csrfmiddlewaretoken\" hidden=\"True\" /><button type=\"submit\">submit</button> </form> </div> </body> </html> Stylesheets Define your stylesheet using CSSObject and use Static Context to include the stylesheets in your views. First let's define templates/styles.py from ph7.css import CSSObject class container(CSSObject): display = \"flex\" align_items = \"center\" justify_content = \"center\" height = \"100vh\" width = \"100vw\" box_sizing = \"border-box\" margin = \"0px\" padding = \"0px\" Next include the stylesheet by importing it and using one of the style classes. from static_files.templates import styles as stylesheet from ph7.context import ctx from ph7.html import body, div, head, html, title ctx.static.view(__name__) template = html( title(\"Static Files Example\"), head( ctx.static.include, ), body( div( \"Hello, World!\", class_name=stylesheet.container, ) ), ) This is what the rendered view looks like <html> <head> <title>Static Files Example</title> <link href=\"/static/css/static_files_templates_styles.css\" rel=\"stylesheet\" id=\"css.static_files.templates.styles\" /> </head> <body> <div class=\"main\">Hello, World!</div> </body> </html> And this is what the rendered stylesheet looks like .main { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; box-sizing: border-box; margin: 0px; padding: 0px; } Note: In the final render of the stylesheet generated by static context, only the classes which have been used in a template will be included. Scripts Write your scripts using the ph7.js APIs. from ph7.js import alert, console, document, fetch, js_callable @js_callable async def fetchDog(): console.log(\"Fetching dog\") response = await fetch( \"https://dog.ceo/api/breeds/image/random\", { \"method\": \"GET\", }, ) data = await response.json() console.log(\"Dog fetched\") document.getElementById(\"image\").src = data.message Use the function in the view from javascript.templates.script import fetchDog from javascript.templates.styles import container, image from ph7.context import ctx from ph7.html import body, button, div, head, html, img ctx.static.view(__name__) template = html( head( ctx.static.include, ), body( div( img( src=\"#\", id=\"image\", alt=\"Click to fetch dog\", class_name=image, ), button( \"Click to fetch a dog\", on={ \"click\": fetchDog(), }, ), class_name=container, ) ), ) if __name__ == \"__main__\": print(template.render({\"_view\": __name__})) This is what the rendered view looks like <html> <head> <link href=\"/static/css/javascript_templates_styles.css\" rel=\"stylesheet\" id=\"css.javascript.templates.styles\" /> <script src=\"/static/js/javascript_templates_script.js\" id=\"js.javascript.templates.script\" ></script> </head> <body> <div class=\"main\"> <img src=\"#\" alt=\"Click to fetch dog\" id=\"image\" class=\"image\" /><button onclick=\"fetchDog()\" > Click to fetch a dog </button> </div> </body> </html> And this is what the rendered script looks like async function fetchDog() { console.log(\"Fetching dog\"); let response = await fetch(\"https://dog.ceo/api/breeds/image/random\", { method: \"GET\", }); let data = await response.json(); console.log(\"Dog fetched\"); document.getElementById(\"image\").src = data.message; }","title":"Django"},{"location":"django/#configure-template-engine","text":"To configure your Django application to use PH7 templates, update settings.py to use PH7's Django template engine. TEMPLATES = [ { \"NAME\": \"PH7\", \"BACKEND\": \"ph7.django.PH7Templates\", \"DIRS\": [], \"APP_DIRS\": True, \"OPTIONS\": {}, } ]","title":"Configure Template Engine"},{"location":"django/#templates","text":"|_ home |_ templates |_ __init__.py # default view Define your view in __init__.py , when defining the view you need to name the default view template , for example from ph7.html import body, div, html, title template = html( title(\"Hello World\"), body( div( \"Hello, World!\", ) ), ) When rendering the view, refer to this template using relative path from django.shortcuts import render def home(request): return render( request=request, template_name=\"home\", # or \"home:template\" ) If you name your view anything other than template , you can specify the view name using module:view format. For example if you name your view home , you can specify the template as app:home .","title":"Templates"},{"location":"django/#forms","text":"Forms can be included directly using form tag. from django import forms from ph7.django import csrf_token from ph7.html import body, button, div, form, html, title class UserForm(forms.Form): \"\"\"User form class.\"\"\" name = forms.CharField(label=\"username\") email = forms.EmailField(label=\"email\") password = forms.CharField(label=\"password\", widget=forms.PasswordInput()) template = html( title(\"Forms Example\"), body( div( form( UserForm(), csrf_token, button(\"submit\", type=\"submit\"), ), ) ), ) <html> <head> <title>Forms Example</title> </head> <body> <div> <form> <label for=\"id_name\">username:</label> <input type=\"text\" name=\"name\" required=\"\" id=\"id_name\" /> <label for=\"id_email\">email:</label> <input type=\"email\" name=\"email\" maxlength=\"320\" required=\"\" id=\"id_email\"/> <label for=\"id_password\">password:</label> <input type=\"password\" name=\"password\" required=\"\" id=\"id_password\" /> <input name=\"csrfmiddlewaretoken\" value=\"aaAAAaAAaAAAaaAAAAAAAaAaaAaAAAaaAAAaaaaaaAAaAAaaAAaaaAAaAAAAaaaa\" id=\"csrfmiddlewaretoken\" hidden=\"True\" /><button type=\"submit\">submit</button> </form> </div> </body> </html>","title":"Forms"},{"location":"django/#stylesheets","text":"Define your stylesheet using CSSObject and use Static Context to include the stylesheets in your views. First let's define templates/styles.py from ph7.css import CSSObject class container(CSSObject): display = \"flex\" align_items = \"center\" justify_content = \"center\" height = \"100vh\" width = \"100vw\" box_sizing = \"border-box\" margin = \"0px\" padding = \"0px\" Next include the stylesheet by importing it and using one of the style classes. from static_files.templates import styles as stylesheet from ph7.context import ctx from ph7.html import body, div, head, html, title ctx.static.view(__name__) template = html( title(\"Static Files Example\"), head( ctx.static.include, ), body( div( \"Hello, World!\", class_name=stylesheet.container, ) ), ) This is what the rendered view looks like <html> <head> <title>Static Files Example</title> <link href=\"/static/css/static_files_templates_styles.css\" rel=\"stylesheet\" id=\"css.static_files.templates.styles\" /> </head> <body> <div class=\"main\">Hello, World!</div> </body> </html> And this is what the rendered stylesheet looks like .main { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; box-sizing: border-box; margin: 0px; padding: 0px; } Note: In the final render of the stylesheet generated by static context, only the classes which have been used in a template will be included.","title":"Stylesheets"},{"location":"django/#scripts","text":"Write your scripts using the ph7.js APIs. from ph7.js import alert, console, document, fetch, js_callable @js_callable async def fetchDog(): console.log(\"Fetching dog\") response = await fetch( \"https://dog.ceo/api/breeds/image/random\", { \"method\": \"GET\", }, ) data = await response.json() console.log(\"Dog fetched\") document.getElementById(\"image\").src = data.message Use the function in the view from javascript.templates.script import fetchDog from javascript.templates.styles import container, image from ph7.context import ctx from ph7.html import body, button, div, head, html, img ctx.static.view(__name__) template = html( head( ctx.static.include, ), body( div( img( src=\"#\", id=\"image\", alt=\"Click to fetch dog\", class_name=image, ), button( \"Click to fetch a dog\", on={ \"click\": fetchDog(), }, ), class_name=container, ) ), ) if __name__ == \"__main__\": print(template.render({\"_view\": __name__})) This is what the rendered view looks like <html> <head> <link href=\"/static/css/javascript_templates_styles.css\" rel=\"stylesheet\" id=\"css.javascript.templates.styles\" /> <script src=\"/static/js/javascript_templates_script.js\" id=\"js.javascript.templates.script\" ></script> </head> <body> <div class=\"main\"> <img src=\"#\" alt=\"Click to fetch dog\" id=\"image\" class=\"image\" /><button onclick=\"fetchDog()\" > Click to fetch a dog </button> </div> </body> </html> And this is what the rendered script looks like async function fetchDog() { console.log(\"Fetching dog\"); let response = await fetch(\"https://dog.ceo/api/breeds/image/random\", { method: \"GET\", }); let data = await response.json(); console.log(\"Dog fetched\"); document.getElementById(\"image\").src = data.message; }","title":"Scripts"},{"location":"flask/","text":"Configure Template Engine To use PH7 templates in you flask app you can use ph7.flask.PH7Templates . from flask import Flask from ph7.flask import PH7Templates app = Flask(__name__) templates = PH7Templates(templates_path=\"./templates\") Templates Then you can define your views in the ./templates directory. |_ templates |_ __init__.py # default/root view |_ dogs.py @app.get(\"/\") def _home(): return templates.render( name=\"root\", context={}, ) @app.get(\"/dogs\") def _dogs(): return templates.render( name=\"dogs\", context={}, ) Stylesheets Define your stylesheet using CSSObject and use Static Context to include the stylesheets in your views. First let's define templates/styles.py from ph7 import CSSObject class container(CSSObject): display = \"flex\" justify_content = \"center\" align_items = \"center\" flex_direction = \"column\" height = \"100%\" width = \"100%\" class image(CSSObject): height = \"200px\" width = \"400px\" margin_bottom = \"25px\" Next include the stylesheet by importing it and using one of the style classes. from templates.script import fetchDog from templates.styles import container, image from ph7.context import ctx from ph7.html import body, button, div, head, html, img ctx.static.view(__name__) template = html( head( ctx.static.include, ), body( div( img( src=\"#\", id=\"image\", alt=\"Click to fetch dog\", class_name=image, ), button( \"Click to fetch a dog\", on={ \"click\": fetchDog(), }, ), class_name=container, ) ), ) This is what the rendered view looks like <html> <head> <link href=\"/static/css/templates_styles.css\" rel=\"stylesheet\" id=\"css.templates.styles\" /> <script src=\"/static/js/templates_script.js\" type=\"text/javascript\" id=\"js.templates.script\" ></script> </head> <body> <div class=\"container\"> <img src=\"#\" alt=\"Click to fetch dog\" id=\"image\" class=\"image\" /><button onclick=\"fetchDog()\" > Click to fetch a dog </button> </div> </body> </html> And this is what the rendered stylesheet looks like .container { display: flex; justify-content: center; align-items: center; flex-direction: column; height: 100%; width: 100%; } .image { height: 200px; width: 400px; margin-bottom: 25px; } Note: In the final render of the stylesheet generated by static context, only the classes which have been used in a template will be included. Scripts Write your scripts using the ph7.js APIs. from ph7.js import console, document, fetch, js_callable @js_callable async def fetchDog(): console.log(\"Fetching dog\") response = await fetch( \"https://dog.ceo/api/breeds/image/random\", { \"method\": \"GET\", }, ) data = await response.json() console.log(\"Dog fetched\") document.getElementById(\"image\").src = data.message Use the function in the view from templates.script import fetchDog from templates.styles import container, image from ph7.context import ctx from ph7.html import body, button, div, head, html, img ctx.static.view(__name__) template = html( head( ctx.static.include, ), body( div( img( src=\"#\", id=\"image\", alt=\"Click to fetch dog\", class_name=image, ), button( \"Click to fetch a dog\", on={ \"click\": fetchDog(), }, ), class_name=container, ) ), ) This is what the rendered view looks like <html> <head> <link href=\"/static/css/templates_styles.css\" rel=\"stylesheet\" id=\"css.templates.styles\" /> <script src=\"/static/js/templates_script.js\" type=\"text/javascript\" id=\"js.templates.script\" ></script> </head> <body> <div class=\"container\"> <img src=\"#\" alt=\"Click to fetch dog\" id=\"image\" class=\"image\" /><button onclick=\"fetchDog()\" > Click to fetch a dog </button> </div> </body> </html> And this is what the rendered script looks like async function fetchDog() { console.log(\"Fetching dog\"); let response = await fetch(\"https://dog.ceo/api/breeds/image/random\", { method: \"GET\", }); let data = await response.json(); console.log(\"Dog fetched\"); document.getElementById(\"image\").src = data.message; }","title":"Flask"},{"location":"flask/#configure-template-engine","text":"To use PH7 templates in you flask app you can use ph7.flask.PH7Templates . from flask import Flask from ph7.flask import PH7Templates app = Flask(__name__) templates = PH7Templates(templates_path=\"./templates\")","title":"Configure Template Engine"},{"location":"flask/#templates","text":"Then you can define your views in the ./templates directory. |_ templates |_ __init__.py # default/root view |_ dogs.py @app.get(\"/\") def _home(): return templates.render( name=\"root\", context={}, ) @app.get(\"/dogs\") def _dogs(): return templates.render( name=\"dogs\", context={}, )","title":"Templates"},{"location":"flask/#stylesheets","text":"Define your stylesheet using CSSObject and use Static Context to include the stylesheets in your views. First let's define templates/styles.py from ph7 import CSSObject class container(CSSObject): display = \"flex\" justify_content = \"center\" align_items = \"center\" flex_direction = \"column\" height = \"100%\" width = \"100%\" class image(CSSObject): height = \"200px\" width = \"400px\" margin_bottom = \"25px\" Next include the stylesheet by importing it and using one of the style classes. from templates.script import fetchDog from templates.styles import container, image from ph7.context import ctx from ph7.html import body, button, div, head, html, img ctx.static.view(__name__) template = html( head( ctx.static.include, ), body( div( img( src=\"#\", id=\"image\", alt=\"Click to fetch dog\", class_name=image, ), button( \"Click to fetch a dog\", on={ \"click\": fetchDog(), }, ), class_name=container, ) ), ) This is what the rendered view looks like <html> <head> <link href=\"/static/css/templates_styles.css\" rel=\"stylesheet\" id=\"css.templates.styles\" /> <script src=\"/static/js/templates_script.js\" type=\"text/javascript\" id=\"js.templates.script\" ></script> </head> <body> <div class=\"container\"> <img src=\"#\" alt=\"Click to fetch dog\" id=\"image\" class=\"image\" /><button onclick=\"fetchDog()\" > Click to fetch a dog </button> </div> </body> </html> And this is what the rendered stylesheet looks like .container { display: flex; justify-content: center; align-items: center; flex-direction: column; height: 100%; width: 100%; } .image { height: 200px; width: 400px; margin-bottom: 25px; } Note: In the final render of the stylesheet generated by static context, only the classes which have been used in a template will be included.","title":"Stylesheets"},{"location":"flask/#scripts","text":"Write your scripts using the ph7.js APIs. from ph7.js import console, document, fetch, js_callable @js_callable async def fetchDog(): console.log(\"Fetching dog\") response = await fetch( \"https://dog.ceo/api/breeds/image/random\", { \"method\": \"GET\", }, ) data = await response.json() console.log(\"Dog fetched\") document.getElementById(\"image\").src = data.message Use the function in the view from templates.script import fetchDog from templates.styles import container, image from ph7.context import ctx from ph7.html import body, button, div, head, html, img ctx.static.view(__name__) template = html( head( ctx.static.include, ), body( div( img( src=\"#\", id=\"image\", alt=\"Click to fetch dog\", class_name=image, ), button( \"Click to fetch a dog\", on={ \"click\": fetchDog(), }, ), class_name=container, ) ), ) This is what the rendered view looks like <html> <head> <link href=\"/static/css/templates_styles.css\" rel=\"stylesheet\" id=\"css.templates.styles\" /> <script src=\"/static/js/templates_script.js\" type=\"text/javascript\" id=\"js.templates.script\" ></script> </head> <body> <div class=\"container\"> <img src=\"#\" alt=\"Click to fetch dog\" id=\"image\" class=\"image\" /><button onclick=\"fetchDog()\" > Click to fetch a dog </button> </div> </body> </html> And this is what the rendered script looks like async function fetchDog() { console.log(\"Fetching dog\"); let response = await fetch(\"https://dog.ceo/api/breeds/image/random\", { method: \"GET\", }); let data = await response.json(); console.log(\"Dog fetched\"); document.getElementById(\"image\").src = data.message; }","title":"Scripts"},{"location":"html/","text":"Writing HTML Writing HTML with PH7 might be a bit weird at first since it does not follow the open/close bracket format. But once you get used to it, it can be ridiculously fast with autocomplete and type checking. from ph7.html import body, div, h1, head, html, title template = html( head( title( \"H1 Tag Example\", ), ), body( div( h1( \"This is an example of H1 tag\", ) ) ), ) print(template) <html> <head> <title>H1 Tag Example</title> </head> <body> <div> <h1>This is an example of H1 tag</h1> </div> </body> </html> Attributes HTML attributes can be passed down as function arguments, all of the HTML tag functions are defined with arguments representing the attributes as keyword arguments so you that can also utilise your autocomplete for faster development. from ph7.html import body, div, head, html, title template = html( head( title(\"HTML Attributes\"), ), body( div( div( \"Example for different attributes\", class_name=[\"text\", \"bold\", \"teal\"], id=\"child\", ), div( \"Clickable div\", on={ \"click\": \"sayHello\", }, ), class_name=\"container\", id=\"container\", ) ), lang=\"en\", ) print(template) <html lang=\"en\"> <head> <title>HTML Attributes</title> </head> <body> <div id=\"container\" class=\"container\"> <div id=\"child\" class=\"text bold teal\">Example for different attributes</div> <div onclick=\"sayHello()\">Clickable div</div> </div> </body> </html> Placeholders PH7 allows you to define placeholders for data which can be filled out at when rendering a view using context argument. A placeholder can be defined with a default value Hello ${name|John Doe} and without a default value Hello ${name} from ph7.html import body, div, html template = html( body( div( \"Hello, ${name|John Doe}, I'm ${age} years old and I like ${food|Coffee}\", ) ) ) print(template.render(context={\"name\": \"Jane Doe\", \"age\": 24})) <html> <body> <div>Hello, Jane Doe, I'm 24 years old and I like Coffee</div> </body> </html> Not providing value for placeholder without default value will result in error from ph7.html import body, div, html template = html( body( div( \"Hello, ${name|John Doe}, I'm ${age} years old and I like ${food|Coffee}\", ) ) ) print(template) ValueError: Error rendering 'Hello, ${name|John Doe}, I'm ${age} years old and I like ${food|Coffee}'; Value for 'age' not provided Reusable views You can define empty views with specific attributes and hydrate them later with data. When hydrating or rehydrating a view, you can also override the attributes. from ph7.html import body, div, html text = div( style={ \"font_size\": \"16px\", \"font_weight\": \"600\", \"letter_spacing\": \"0.75px\", } ) template = html( body( div( text(\"Text 1\"), text(\"Text 2\"), text(\"Text 3\", class_name=[\"active\"]), ) ) ) print(template) <html> <body> <div> <div style=\"font-size:16px;font-weight:600;letter-spacing:0.75px\">Text 1</div> <div style=\"font-size:16px;font-weight:600;letter-spacing:0.75px\">Text 2</div> <div class=\"active\" style=\"font-size:16px;font-weight:600;letter-spacing:0.75px\">Text 3</div> </div> </body> </html> Overridable views You can define a block as overridable by using overridable method, these blocks can be filled with content when hydrating/rehydrating the parent component. from ph7.html import a, body, div, html, title button = div(class_name=[\"btn\", \"btn-primary\"]) base = html( title(\"Templates Example\"), body( div(class_name=\"nav\").overridable(\"navbar\"), div(class_name=\"container\").overridable(\"container\"), div( \"\u00a9 Organisation 2024 | Made by \", a(\"angrybayblade\", href=\"https://github.com/angrybayblade\"), class_name=\"footer\", ), ), ) template = base( navbar=div( button(\"Home\", class_name=[\"btn\", \"btn-primary\", \"active\"]), button(\"About Us\"), button(\"Contact Us\"), ), container=div( div( \"Hello \", \"${name|John Doe}\", class_name=\"greeting\", ), class_name=\"flex-center\", ), ) print(template.render(context={\"name\": \"Jane Doe\"})) <html> <title>Templates Example</title> <body> <div class=\"nav\"> <div> <div class=\"btn btn-primary active\">Home</div> <div class=\"btn btn-primary\">About Us</div> <div class=\"btn btn-primary\">Contact Us</div> </div> </div> <div class=\"container\"> <div class=\"flex-center\"> <div class=\"greeting\">Hello Jane Doe</div> </div> </div> <div class=\"footer\">\u00a9 Organisation 2024 | Made by <a href=\"https://github.com/angrybayblade\">angrybayblade</a></div> </body> </html> Using overridable views and reusable views you can create a modular and reusable codebase and save a lot of time an effort in the process. Function As View You can define your view as a python function create views based on conditions, using for loops or any other kind of logical operation to build your view. import typing as t from ph7.html import HtmlNode, body, div, html user = div(class_name=\"user\") users = div(class_name=\"user\") nousers = div(\"Error, Users not found\", class_name=\"error\") def render_users(context: t.Dict) -> HtmlNode: if \"number_of_users\" not in context: return nousers return users(user(f\"User {i}\") for i in range(context[\"number_of_users\"])) template = html( body( render_users, ) ) print(\"<!-- With `number_of_users` parameter -->\\n\") print(template.render(context={\"number_of_users\": 5}), end=\"\\n\\n\") print(\"<!-- Without `number_of_users` parameter -->\\n\") print(template.render(context={})) <!-- With `number_of_users` parameter --> <html> <body> <div class=\"user\"> <div class=\"user\">User 0</div> <div class=\"user\">User 1</div> <div class=\"user\">User 2</div> <div class=\"user\">User 3</div> <div class=\"user\">User 4</div> </div> </body> </html> <!-- Without `number_of_users` parameter --> <html> <body> <div class=\"error\">Error, Users not found</div> </body> </html> You can also use named arguments instead of context argument to make thing more simple. import typing as t from ph7.html import HtmlNode, body, div, html user = div(class_name=\"user\") users = div(class_name=\"user\") nousers = div(\"Error, Users not found\", class_name=\"error\") def render_users(number_of_users: t.Optional[int] = None) -> HtmlNode: if number_of_users is None: return nousers return users(user(f\"User {i}\") for i in range(number_of_users)) template = html( body( render_users, ) ) print(\"<!-- With `number_of_users` parameter -->\\n\") print(template.render(context={\"number_of_users\": 5}), end=\"\\n\\n\") print(\"<!-- Without `number_of_users` parameter -->\\n\") print(template.render(context={})) <!-- With `number_of_users` parameter --> <html> <body> <div class=\"user\"> <div class=\"user\">User 0</div> <div class=\"user\">User 1</div> <div class=\"user\">User 2</div> <div class=\"user\">User 3</div> <div class=\"user\">User 4</div> </div> </body> </html> <!-- Without `number_of_users` parameter --> <html> <body> <div class=\"error\">Error, Users not found</div> </body> </html> Caching Since you can define your views as python functions you can also use caching utilities like functools.lru_cache to reduce rendering time. import time import typing as t from functools import lru_cache from ph7.html import HtmlNode, body, div, html user = div(class_name=\"user\") users = div(class_name=\"user\") nousers = div(\"Error, Users not found\", class_name=\"error\") @lru_cache def _render_users(n: int) -> HtmlNode: return users(user(f\"User {i}\") for i in range(n)) def render_users(context: t.Dict) -> HtmlNode: if \"number_of_users\" not in context: return nousers return _render_users(n=context[\"number_of_users\"]) template = html( body( render_users, ) ) tick = time.perf_counter() template.render(context={\"number_of_users\": 300000}) print(f\"First render: {time.perf_counter() - tick}\") tick = time.perf_counter() template.render(context={\"number_of_users\": 300000}) print(f\"Second render: {time.perf_counter() - tick}\") tick = time.perf_counter() template.render(context={\"number_of_users\": 300000}) print(f\"Third render: {time.perf_counter() - tick}\") First render: 4.100849833999746 Second render: 0.1824485419992925 Third render: 0.1806802080000125 When making a view cacheable, make sure the view satisfies following constrains View only depends on the data provided by the arguments and does not fetch any external data View does not return very large objects, or you might run into out of memory error after a while. If a view returns very large objects and you still want to cache it, you can use a smaller cache stack size on functools.lru_cache .","title":"HTML"},{"location":"html/#writing-html","text":"Writing HTML with PH7 might be a bit weird at first since it does not follow the open/close bracket format. But once you get used to it, it can be ridiculously fast with autocomplete and type checking. from ph7.html import body, div, h1, head, html, title template = html( head( title( \"H1 Tag Example\", ), ), body( div( h1( \"This is an example of H1 tag\", ) ) ), ) print(template) <html> <head> <title>H1 Tag Example</title> </head> <body> <div> <h1>This is an example of H1 tag</h1> </div> </body> </html>","title":"Writing HTML"},{"location":"html/#attributes","text":"HTML attributes can be passed down as function arguments, all of the HTML tag functions are defined with arguments representing the attributes as keyword arguments so you that can also utilise your autocomplete for faster development. from ph7.html import body, div, head, html, title template = html( head( title(\"HTML Attributes\"), ), body( div( div( \"Example for different attributes\", class_name=[\"text\", \"bold\", \"teal\"], id=\"child\", ), div( \"Clickable div\", on={ \"click\": \"sayHello\", }, ), class_name=\"container\", id=\"container\", ) ), lang=\"en\", ) print(template) <html lang=\"en\"> <head> <title>HTML Attributes</title> </head> <body> <div id=\"container\" class=\"container\"> <div id=\"child\" class=\"text bold teal\">Example for different attributes</div> <div onclick=\"sayHello()\">Clickable div</div> </div> </body> </html>","title":"Attributes"},{"location":"html/#placeholders","text":"PH7 allows you to define placeholders for data which can be filled out at when rendering a view using context argument. A placeholder can be defined with a default value Hello ${name|John Doe} and without a default value Hello ${name} from ph7.html import body, div, html template = html( body( div( \"Hello, ${name|John Doe}, I'm ${age} years old and I like ${food|Coffee}\", ) ) ) print(template.render(context={\"name\": \"Jane Doe\", \"age\": 24})) <html> <body> <div>Hello, Jane Doe, I'm 24 years old and I like Coffee</div> </body> </html> Not providing value for placeholder without default value will result in error from ph7.html import body, div, html template = html( body( div( \"Hello, ${name|John Doe}, I'm ${age} years old and I like ${food|Coffee}\", ) ) ) print(template) ValueError: Error rendering 'Hello, ${name|John Doe}, I'm ${age} years old and I like ${food|Coffee}'; Value for 'age' not provided","title":"Placeholders"},{"location":"html/#reusable-views","text":"You can define empty views with specific attributes and hydrate them later with data. When hydrating or rehydrating a view, you can also override the attributes. from ph7.html import body, div, html text = div( style={ \"font_size\": \"16px\", \"font_weight\": \"600\", \"letter_spacing\": \"0.75px\", } ) template = html( body( div( text(\"Text 1\"), text(\"Text 2\"), text(\"Text 3\", class_name=[\"active\"]), ) ) ) print(template) <html> <body> <div> <div style=\"font-size:16px;font-weight:600;letter-spacing:0.75px\">Text 1</div> <div style=\"font-size:16px;font-weight:600;letter-spacing:0.75px\">Text 2</div> <div class=\"active\" style=\"font-size:16px;font-weight:600;letter-spacing:0.75px\">Text 3</div> </div> </body> </html>","title":"Reusable views"},{"location":"html/#overridable-views","text":"You can define a block as overridable by using overridable method, these blocks can be filled with content when hydrating/rehydrating the parent component. from ph7.html import a, body, div, html, title button = div(class_name=[\"btn\", \"btn-primary\"]) base = html( title(\"Templates Example\"), body( div(class_name=\"nav\").overridable(\"navbar\"), div(class_name=\"container\").overridable(\"container\"), div( \"\u00a9 Organisation 2024 | Made by \", a(\"angrybayblade\", href=\"https://github.com/angrybayblade\"), class_name=\"footer\", ), ), ) template = base( navbar=div( button(\"Home\", class_name=[\"btn\", \"btn-primary\", \"active\"]), button(\"About Us\"), button(\"Contact Us\"), ), container=div( div( \"Hello \", \"${name|John Doe}\", class_name=\"greeting\", ), class_name=\"flex-center\", ), ) print(template.render(context={\"name\": \"Jane Doe\"})) <html> <title>Templates Example</title> <body> <div class=\"nav\"> <div> <div class=\"btn btn-primary active\">Home</div> <div class=\"btn btn-primary\">About Us</div> <div class=\"btn btn-primary\">Contact Us</div> </div> </div> <div class=\"container\"> <div class=\"flex-center\"> <div class=\"greeting\">Hello Jane Doe</div> </div> </div> <div class=\"footer\">\u00a9 Organisation 2024 | Made by <a href=\"https://github.com/angrybayblade\">angrybayblade</a></div> </body> </html> Using overridable views and reusable views you can create a modular and reusable codebase and save a lot of time an effort in the process.","title":"Overridable views"},{"location":"html/#function-as-view","text":"You can define your view as a python function create views based on conditions, using for loops or any other kind of logical operation to build your view. import typing as t from ph7.html import HtmlNode, body, div, html user = div(class_name=\"user\") users = div(class_name=\"user\") nousers = div(\"Error, Users not found\", class_name=\"error\") def render_users(context: t.Dict) -> HtmlNode: if \"number_of_users\" not in context: return nousers return users(user(f\"User {i}\") for i in range(context[\"number_of_users\"])) template = html( body( render_users, ) ) print(\"<!-- With `number_of_users` parameter -->\\n\") print(template.render(context={\"number_of_users\": 5}), end=\"\\n\\n\") print(\"<!-- Without `number_of_users` parameter -->\\n\") print(template.render(context={})) <!-- With `number_of_users` parameter --> <html> <body> <div class=\"user\"> <div class=\"user\">User 0</div> <div class=\"user\">User 1</div> <div class=\"user\">User 2</div> <div class=\"user\">User 3</div> <div class=\"user\">User 4</div> </div> </body> </html> <!-- Without `number_of_users` parameter --> <html> <body> <div class=\"error\">Error, Users not found</div> </body> </html> You can also use named arguments instead of context argument to make thing more simple. import typing as t from ph7.html import HtmlNode, body, div, html user = div(class_name=\"user\") users = div(class_name=\"user\") nousers = div(\"Error, Users not found\", class_name=\"error\") def render_users(number_of_users: t.Optional[int] = None) -> HtmlNode: if number_of_users is None: return nousers return users(user(f\"User {i}\") for i in range(number_of_users)) template = html( body( render_users, ) ) print(\"<!-- With `number_of_users` parameter -->\\n\") print(template.render(context={\"number_of_users\": 5}), end=\"\\n\\n\") print(\"<!-- Without `number_of_users` parameter -->\\n\") print(template.render(context={})) <!-- With `number_of_users` parameter --> <html> <body> <div class=\"user\"> <div class=\"user\">User 0</div> <div class=\"user\">User 1</div> <div class=\"user\">User 2</div> <div class=\"user\">User 3</div> <div class=\"user\">User 4</div> </div> </body> </html> <!-- Without `number_of_users` parameter --> <html> <body> <div class=\"error\">Error, Users not found</div> </body> </html>","title":"Function As View"},{"location":"html/#caching","text":"Since you can define your views as python functions you can also use caching utilities like functools.lru_cache to reduce rendering time. import time import typing as t from functools import lru_cache from ph7.html import HtmlNode, body, div, html user = div(class_name=\"user\") users = div(class_name=\"user\") nousers = div(\"Error, Users not found\", class_name=\"error\") @lru_cache def _render_users(n: int) -> HtmlNode: return users(user(f\"User {i}\") for i in range(n)) def render_users(context: t.Dict) -> HtmlNode: if \"number_of_users\" not in context: return nousers return _render_users(n=context[\"number_of_users\"]) template = html( body( render_users, ) ) tick = time.perf_counter() template.render(context={\"number_of_users\": 300000}) print(f\"First render: {time.perf_counter() - tick}\") tick = time.perf_counter() template.render(context={\"number_of_users\": 300000}) print(f\"Second render: {time.perf_counter() - tick}\") tick = time.perf_counter() template.render(context={\"number_of_users\": 300000}) print(f\"Third render: {time.perf_counter() - tick}\") First render: 4.100849833999746 Second render: 0.1824485419992925 Third render: 0.1806802080000125 When making a view cacheable, make sure the view satisfies following constrains View only depends on the data provided by the arguments and does not fetch any external data View does not return very large objects, or you might run into out of memory error after a while. If a view returns very large objects and you still want to cache it, you can use a smaller cache stack size on functools.lru_cache .","title":"Caching"},{"location":"js/","text":"Currently PH7 has very limited JavaScript support. But the transpiler API allows you to write your JavaScript code in pure python. PH7 also provides a set of mock APIs that can be used for autocomplete and type checking. The list of mock APIs alert console fetch document Functions Write your functions in python and refer them as event handler, PH7 will take care of the rest. from ph7 import include from ph7.html import body, button, div, head, html, img from ph7.js import console, document, fetch async def fetchDog(): console.log(\"Fetching dog\") response = await fetch( \"https://dog.ceo/api/breeds/image/random\", {\"method\": \"GET\"}, ) if response.status != 200: response_body = await response.text() console.log(f\"Error fetching dog; {response_body}\") return data = await response.json() console.log(\"Dog fetched\") document.getElementById(\"image\").src = data.message template = html( head( include(fetchDog), ), body( div( img( src=\"#\", id=\"image\", alt=\"Click to fetch dog\", style={\"height\": \"200px\", \"width\": \"400px\"}, ), button( \"Click to fetch a dog\", on={ \"click\": fetchDog, }, ), ) ), ) print(template) <html> <head> <script type=\"text/javascript\"> async function fetchDog() { console.log('Fetching dog'); let response = await fetch('https://dog.ceo/api/breeds/image/random', { 'method': 'GET' }); if (response.status != 200) { let response_body = await response.text(); console.log('Error fetching dog; ' + response_body); return; }; let data = await response.json(); console.log('Dog fetched'); document.getElementById('image').src = data.message; }; </script> </head> <body> <div><img src=\"#\" alt=\"Click to fetch dog\" id=\"image\" style=\"height:200px;width:400px\" /><button onclick=\"fetchDog()\">Click to fetch a dog</button></div> </body> </html> Arguments If you want to render a function call with arguments you can decorate a method with ph7.js.js_callable and it'll allow you to render function calls with arguments. from ph7 import include from ph7.html import HtmlNode, body, button, div, head, html, img from ph7.js import document, fetch, js_callable @js_callable async def fetchUserProfilePicture(user: str) -> None: response = await fetch( \"/api/users/\" + user, {\"method\": \"GET\"}, ) data = await response.json() document.getElementById(f\"image-{user}\").src = data.profile_picture def _user(name: str) -> HtmlNode: return div( img(src=\"#\", style={\"height\": \"200px\", \"width\": \"400px\"}, id=f\"image-{name}\"), button( f\"Click to fetch {name}'s profile picture.\", on={ \"click\": fetchUserProfilePicture(name), }, ), ) def _users(context: dict) -> HtmlNode: return div(_user(name=name) for name in context[\"users\"]) template = html( head( include(fetchUserProfilePicture), ), body( _users, ), ) print(template.render(context={\"users\": [\"john.doe\", \"jane.doe\"]})) <html> <head> <script type=\"text/javascript\"> async function fetchUserProfilePicture(user) { let response = await fetch('/api/users/' + user, { 'method': 'GET' }); let data = await response.json(); document.getElementById('image-' + user).src = data.profile_picture; }; </script> </head> <body> <div> <div><img src=\"#\" id=\"image-john.doe\" style=\"height:200px;width:400px\" /><button onclick=\"fetchUserProfilePicture('john.doe')\">Click to fetch john.doe's profile picture.</button></div> <div><img src=\"#\" id=\"image-jane.doe\" style=\"height:200px;width:400px\" /><button onclick=\"fetchUserProfilePicture('jane.doe')\">Click to fetch jane.doe's profile picture.</button></div> </div> </body> </html> These function calls are also type checkable. Conditionals def checkCondition(number: int): if number % 2 == 0: print(\"even\") else: print(\"odd\") def fizzBuzz(number: int): if number % 3 == 0 and number % 5 == 0: print(\"fizzbuzz\") elif number % 3 == 0: print(\"fizz\") elif number % 5 == 0: print(\"buzz\") else: print(number) def strictEqual(number: int): if number % 2 is 0: print(\"even\") else: print(\"odd\") function checkCondition(number) { if (number % 2 == 0) { console.log('even'); } else { console.log('odd'); }; } function fizzBuzz(number) { if (number % 3 == 0 && number % 5 == 0) { console.log('fizzbuzz'); } else if (number % 3 == 0) { console.log('fizz'); } else if (number % 5 == 0) { console.log('buzz'); } else { console.log(number); }; } function strictEqual(number) { if (number % 2 === 0) { console.log('even'); } else { console.log('odd'); }; } For Loop def oddEven(n: int): for i in range(n): if i % 2 is 0: print(i + \" is even\") else: print(i + \" is odd\") def oddEvenStartEnd(start: int, end: int): for i in range(start, end): if i % 2 is 0: print(i + \" is even\") else: print(i + \" is odd\") def oddEvenStartEndStep(start: int, end: int, step: int): for i in range(start, end, step): if i % 2 is 0: print(i + \" is even\") else: print(i + \" is odd\") function oddEven(n) { for (let i = 0; i < n; i = i + 1) { if (i % 2 === 0) { console.log(i + ' is even'); } else { console.log(i + ' is odd'); }; } } function oddEvenStartEnd(start, end) { for (let i = start; i < end; i = i + 1) { if (i % 2 === 0) { console.log(i + ' is even'); } else { console.log(i + ' is odd'); }; } } function oddEvenStartEndStep(start, end, step) { for (let i = start; i < end; i = i + step) { if (i % 2 === 0) { console.log(i + ' is even'); } else { console.log(i + ' is odd'); }; } } Try/Catch def tryCatch(): try: print(\"try something\") except Exception as e: print(f\"Error: {e}\") def tryCatchFinally(): try: print(\"try something\") except Exception as e: print(f\"Error: {e}\") finally: print(\"finally\") def tryRaiseCatch(): try: raise Exception(\"Some error\") except Exception as e: print(f\"Error: {e}\") function tryCatch() { try { console.log('try something'); } catch (e) { console.log('Error: ' + e); }; } function tryCatchFinally() { try { console.log('try something'); } catch (e) { console.log('Error: ' + e); } finally { console.log('finally'); }; } function tryRaiseCatch() { try { throw new Error('Some error'); } catch (e) { console.log('Error: ' + e); }; } Static Context PH7 has a runtime context object which can be used for managing the static resource. To use a static context, import ph7.context.ctx , add ctx.static.view(__name__) at the top of your template and add ctx.static.include in your view. In the following example we'll use a function defined in an external module. from examples.script import alertHello from examples.style import textbox from ph7.context import ctx from ph7.html import body, div, head, html ctx.static.view(__name__) template = html( head( ctx.static.include, ), body( div( div( \"Click Here\", class_name=[textbox.text], on={ \"click\": alertHello(\"John Doe\"), }, ), class_name=[textbox], ) ), ) print(template.render(context={\"_view\": __name__})) <html> <head> <style id=\"css.examples.style\"> .textbox { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; } .textbox .text { font-size: 12px; font-weight: 500; font-family: Lucida Console, Monaco, monospace; } </style> <script type=\"text/javascript\" id=\"js.examples.script\"> function alertHello(user) { alert('Hello, ' + user); } </script> </head> <body> <div class=\"textbox\"> <div class=\"text\" onclick=\"alertHello('John Doe')\">Click Here</div> </div> </body> </html> As you can see, the static context collects the various static resources and includes them as part of the view. The output above is produced with the mode set to development by exporting DEVELOPMENT=\"1\" . When not in development mode, PH7 will compile static resources, write them as files and reference those files. Here's and example of production render of the same template <html> <head> <link href=\"/static/css/examples_style.css\" rel=\"stylesheet\" id=\"css.examples.style\" /> <script src=\"/static/js/examples_script.js\" type=\"text/javascript\" id=\"js.examples.script\"></script> </head> <body> <div class=\"textbox\"> <div class=\"text\" onclick=\"alertHello('John Doe')\">Click Here</div> </div> </body> </html> $ cat static/js/examples_script.js function alertHello(user) { alert('Hello, ' + user); }","title":"JS"},{"location":"js/#functions","text":"Write your functions in python and refer them as event handler, PH7 will take care of the rest. from ph7 import include from ph7.html import body, button, div, head, html, img from ph7.js import console, document, fetch async def fetchDog(): console.log(\"Fetching dog\") response = await fetch( \"https://dog.ceo/api/breeds/image/random\", {\"method\": \"GET\"}, ) if response.status != 200: response_body = await response.text() console.log(f\"Error fetching dog; {response_body}\") return data = await response.json() console.log(\"Dog fetched\") document.getElementById(\"image\").src = data.message template = html( head( include(fetchDog), ), body( div( img( src=\"#\", id=\"image\", alt=\"Click to fetch dog\", style={\"height\": \"200px\", \"width\": \"400px\"}, ), button( \"Click to fetch a dog\", on={ \"click\": fetchDog, }, ), ) ), ) print(template) <html> <head> <script type=\"text/javascript\"> async function fetchDog() { console.log('Fetching dog'); let response = await fetch('https://dog.ceo/api/breeds/image/random', { 'method': 'GET' }); if (response.status != 200) { let response_body = await response.text(); console.log('Error fetching dog; ' + response_body); return; }; let data = await response.json(); console.log('Dog fetched'); document.getElementById('image').src = data.message; }; </script> </head> <body> <div><img src=\"#\" alt=\"Click to fetch dog\" id=\"image\" style=\"height:200px;width:400px\" /><button onclick=\"fetchDog()\">Click to fetch a dog</button></div> </body> </html>","title":"Functions"},{"location":"js/#arguments","text":"If you want to render a function call with arguments you can decorate a method with ph7.js.js_callable and it'll allow you to render function calls with arguments. from ph7 import include from ph7.html import HtmlNode, body, button, div, head, html, img from ph7.js import document, fetch, js_callable @js_callable async def fetchUserProfilePicture(user: str) -> None: response = await fetch( \"/api/users/\" + user, {\"method\": \"GET\"}, ) data = await response.json() document.getElementById(f\"image-{user}\").src = data.profile_picture def _user(name: str) -> HtmlNode: return div( img(src=\"#\", style={\"height\": \"200px\", \"width\": \"400px\"}, id=f\"image-{name}\"), button( f\"Click to fetch {name}'s profile picture.\", on={ \"click\": fetchUserProfilePicture(name), }, ), ) def _users(context: dict) -> HtmlNode: return div(_user(name=name) for name in context[\"users\"]) template = html( head( include(fetchUserProfilePicture), ), body( _users, ), ) print(template.render(context={\"users\": [\"john.doe\", \"jane.doe\"]})) <html> <head> <script type=\"text/javascript\"> async function fetchUserProfilePicture(user) { let response = await fetch('/api/users/' + user, { 'method': 'GET' }); let data = await response.json(); document.getElementById('image-' + user).src = data.profile_picture; }; </script> </head> <body> <div> <div><img src=\"#\" id=\"image-john.doe\" style=\"height:200px;width:400px\" /><button onclick=\"fetchUserProfilePicture('john.doe')\">Click to fetch john.doe's profile picture.</button></div> <div><img src=\"#\" id=\"image-jane.doe\" style=\"height:200px;width:400px\" /><button onclick=\"fetchUserProfilePicture('jane.doe')\">Click to fetch jane.doe's profile picture.</button></div> </div> </body> </html> These function calls are also type checkable.","title":"Arguments"},{"location":"js/#conditionals","text":"def checkCondition(number: int): if number % 2 == 0: print(\"even\") else: print(\"odd\") def fizzBuzz(number: int): if number % 3 == 0 and number % 5 == 0: print(\"fizzbuzz\") elif number % 3 == 0: print(\"fizz\") elif number % 5 == 0: print(\"buzz\") else: print(number) def strictEqual(number: int): if number % 2 is 0: print(\"even\") else: print(\"odd\") function checkCondition(number) { if (number % 2 == 0) { console.log('even'); } else { console.log('odd'); }; } function fizzBuzz(number) { if (number % 3 == 0 && number % 5 == 0) { console.log('fizzbuzz'); } else if (number % 3 == 0) { console.log('fizz'); } else if (number % 5 == 0) { console.log('buzz'); } else { console.log(number); }; } function strictEqual(number) { if (number % 2 === 0) { console.log('even'); } else { console.log('odd'); }; }","title":"Conditionals"},{"location":"js/#for-loop","text":"def oddEven(n: int): for i in range(n): if i % 2 is 0: print(i + \" is even\") else: print(i + \" is odd\") def oddEvenStartEnd(start: int, end: int): for i in range(start, end): if i % 2 is 0: print(i + \" is even\") else: print(i + \" is odd\") def oddEvenStartEndStep(start: int, end: int, step: int): for i in range(start, end, step): if i % 2 is 0: print(i + \" is even\") else: print(i + \" is odd\") function oddEven(n) { for (let i = 0; i < n; i = i + 1) { if (i % 2 === 0) { console.log(i + ' is even'); } else { console.log(i + ' is odd'); }; } } function oddEvenStartEnd(start, end) { for (let i = start; i < end; i = i + 1) { if (i % 2 === 0) { console.log(i + ' is even'); } else { console.log(i + ' is odd'); }; } } function oddEvenStartEndStep(start, end, step) { for (let i = start; i < end; i = i + step) { if (i % 2 === 0) { console.log(i + ' is even'); } else { console.log(i + ' is odd'); }; } }","title":"For Loop"},{"location":"js/#trycatch","text":"def tryCatch(): try: print(\"try something\") except Exception as e: print(f\"Error: {e}\") def tryCatchFinally(): try: print(\"try something\") except Exception as e: print(f\"Error: {e}\") finally: print(\"finally\") def tryRaiseCatch(): try: raise Exception(\"Some error\") except Exception as e: print(f\"Error: {e}\") function tryCatch() { try { console.log('try something'); } catch (e) { console.log('Error: ' + e); }; } function tryCatchFinally() { try { console.log('try something'); } catch (e) { console.log('Error: ' + e); } finally { console.log('finally'); }; } function tryRaiseCatch() { try { throw new Error('Some error'); } catch (e) { console.log('Error: ' + e); }; }","title":"Try/Catch"},{"location":"js/#static-context","text":"PH7 has a runtime context object which can be used for managing the static resource. To use a static context, import ph7.context.ctx , add ctx.static.view(__name__) at the top of your template and add ctx.static.include in your view. In the following example we'll use a function defined in an external module. from examples.script import alertHello from examples.style import textbox from ph7.context import ctx from ph7.html import body, div, head, html ctx.static.view(__name__) template = html( head( ctx.static.include, ), body( div( div( \"Click Here\", class_name=[textbox.text], on={ \"click\": alertHello(\"John Doe\"), }, ), class_name=[textbox], ) ), ) print(template.render(context={\"_view\": __name__})) <html> <head> <style id=\"css.examples.style\"> .textbox { display: flex; align-items: center; justify-content: center; height: 100vh; width: 100vw; } .textbox .text { font-size: 12px; font-weight: 500; font-family: Lucida Console, Monaco, monospace; } </style> <script type=\"text/javascript\" id=\"js.examples.script\"> function alertHello(user) { alert('Hello, ' + user); } </script> </head> <body> <div class=\"textbox\"> <div class=\"text\" onclick=\"alertHello('John Doe')\">Click Here</div> </div> </body> </html> As you can see, the static context collects the various static resources and includes them as part of the view. The output above is produced with the mode set to development by exporting DEVELOPMENT=\"1\" . When not in development mode, PH7 will compile static resources, write them as files and reference those files. Here's and example of production render of the same template <html> <head> <link href=\"/static/css/examples_style.css\" rel=\"stylesheet\" id=\"css.examples.style\" /> <script src=\"/static/js/examples_script.js\" type=\"text/javascript\" id=\"js.examples.script\"></script> </head> <body> <div class=\"textbox\"> <div class=\"text\" onclick=\"alertHello('John Doe')\">Click Here</div> </div> </body> </html> $ cat static/js/examples_script.js function alertHello(user) { alert('Hello, ' + user); }","title":"Static Context"}]}